[{"C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\index.js":"1","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\App.js":"2","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\reportWebVitals.js":"3","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\LeftSidebar.js":"4","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\Navbar.js":"5","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\common\\jsTPS.js":"6","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\Workspace.js":"7","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\ListLink.js":"8","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\ToDoItem.js":"9","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\Modal.js":"10"},{"size":539,"mtime":1615565841000,"results":"11","hashOfConfig":"12"},{"size":5478,"mtime":1616038351032,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1615565841000,"results":"14","hashOfConfig":"12"},{"size":1651,"mtime":1616035896269,"results":"15","hashOfConfig":"12"},{"size":412,"mtime":1615565841000,"results":"16","hashOfConfig":"12"},{"size":6496,"mtime":1615565841000,"results":"17","hashOfConfig":"12"},{"size":6004,"mtime":1616038106790,"results":"18","hashOfConfig":"12"},{"size":2109,"mtime":1616036831762,"results":"19","hashOfConfig":"12"},{"size":6286,"mtime":1616038133166,"results":"20","hashOfConfig":"12"},{"size":721,"mtime":1615949627925,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"2ztbxs",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\index.js",[],["46","47"],"C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\App.js",["48"],"C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\reportWebVitals.js",[],"C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\LeftSidebar.js",["49"],"// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\nimport React, { Component } from 'react';\nimport ListLink from './ListLink'\nimport AddBox from '@material-ui/icons/AddBox';\n\nclass LeftSidebar extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleAddNewList = () => {\n        this.props.addNewListCallback();\n    }\n\n    \n\n    render() {\n        return (\n            <div id=\"left-sidebar\">\n                <div id=\"left-sidebar-header\" class=\"section-header\">\n                    <span class=\"left-sidebar-header-text\">Todolists</span>\n                    <span class=\"left-sidebar-controls\" id=\"add-undo-redo-box\">\n                        <AddBox \n                            id=\"add-list-button\"\n                            className=\"material-icons todo_button\"\n                            onClick={this.handleAddNewList} \n                            />\n                            \n                    </span>\n                </div>\n                <div id=\"todo-lists-list\"  > \n                {\n                    this.props.toDoLists.map((toDoList) => (\n                        <ListLink\n                            key={toDoList.id} \n                            toDoList={toDoList}                                // PASS THE LIST TO THE CHILDREN\n                            loadToDoListCallback={this.props.loadToDoListCallback} \n                            currentList={this.props.currentList} />  // PASS THE CALLBACK TO THE CHILDREN\n                            \n                    ))\n                }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LeftSidebar;","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\Navbar.js",["50"],"// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\nimport React, { Component } from 'react'\n\nclass Navbar extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div id=\"navbar\">\n                <div id=\"title-div\">\n                    Todo Tracker\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Navbar;","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\common\\jsTPS.js",["51","52"],"'use strict'\n\n/**\n * jsTPS_Transaction\n * \n * This provides the basic structure for a transaction class. Note to use\n * jsTPS one should create objects that define these two methods, doTransaction\n * and undoTransaction, which will update the application state accordingly.\n * \n * @author THE McKilla Gorilla (accept no imposters)\n * @version 1.0\n */\nexport class jsTPS_Transaction {\n    /**\n     * This method is called by jTPS when a transaction is executed.\n     */\n    doTransaction() {\n        console.log(\"doTransaction - MISSING IMPLEMENTATION\");\n    }\n    \n    /**\n     * This method is called by jTPS when a transaction is undone.\n     */\n    undoTransaction() {\n        console.log(\"undoTransaction - MISSING IMPLEMENTATION\");\n    }\n}\n\n/**\n * jsTPS\n * \n * This class serves as the Transaction Processing System. Note that it manages\n * a stack of jsTPS_Transaction objects, each of which know how to do or undo\n * state changes for the given application. Note that this TPS is not platform\n * specific as it is programmed in raw JavaScript.\n */\nexport default class jsTPS {\n    constructor() {\n        // THE TRANSACTION STACK\n        this.transactions = [];\n\n        // THE TOTAL NUMBER OF TRANSACTIONS ON THE STACK,\n        // INCLUDING THOSE THAT MAY HAVE ALREADY BEEN UNDONE\n        this.numTransactions = 0;\n\n        // THE INDEX OF THE MOST RECENT TRANSACTION, NOTE THAT\n        // THIS MAY BE IN THE MIDDLE OF THE TRANSACTION STACK\n        // IF SOME TRANSACTIONS ON THE STACK HAVE BEEN UNDONE\n        // AND STILL COULD BE REDONE.\n        this.mostRecentTransaction = -1;\n\n        // THESE STATE VARIABLES ARE TURNED ON AND OFF WHILE\n        // TRANSACTIONS ARE DOING THEIR WORK SO AS TO HELP\n        // MANAGE CONCURRENT UPDATES\n        this.performingDo = false;\n        this.performingUndo = false;\n    }\n\n    /**\n     * isPerformingDo\n     * \n     * Accessor method for getting a boolean representing whether or not\n     * a transaction is currently in the midst of a do/redo operation.\n     */\n    isPerformingDo() {\n        return this.performingDo;\n    }\n\n    /**\n     * isPerformingUndo\n     * \n     * Accessor method for getting a boolean representing whether or not\n     * a transaction is currently in the midst of an undo operation.\n     */\n    isPerformingUndo() {\n        return this.performingUndo;\n    }\n\n    /**\n     * getSize\n     * \n     * Accessor method for getting the number of transactions on the stack.\n     */\n    getSize() {\n        return this.transactions.length;\n    }\n\n    /**\n     * getRedoSize\n     * \n     * Method for getting the total number of transactions on the stack\n     * that can possibly be redone.\n     */\n    getRedoSize() {\n        return this.getSize() - this.mostRecentTransaction - 1;\n    }\n\n    /**\n     * getUndoSize\n     * \n     * Method for getting the total number of transactions on the stack\n     * that can possible be undone.\n     */\n    getUndoSize() {\n        return this.mostRecentTransaction + 1;\n    }\n\n    /**\n     * hasTransactionToRedo\n     * \n     * Method for getting a boolean representing whether or not\n     * there are transactions on the stack that can be redone.\n     */\n    hasTransactionToRedo() {\n        return (this.mostRecentTransaction+1) < this.numTransactions;\n    }\n\n    /**\n     * hasTransactionToUndo\n     * \n     * Method for getting a boolean representing whehter or not\n     * there are transactions on the stack that can be undone.\n     */\n    hasTransactionToUndo() {\n        return this.mostRecentTransaction >= 0;\n    }\n\n    /**\n     * addTransaction\n     * \n     * Method for adding a transaction to the TPS stack, note it\n     * also then does the transaction.\n     * \n     * @param {jsTPS_Transaction} transaction Transaction to add to the stack and do.\n     */\n    addTransaction(transaction) {\n        // ARE WE BRANCHING?\n        if ((this.mostRecentTransaction < 0) \n            || (this.mostRecentTransaction < (this.transactions.length - 1))) {\n                for (let i = this.transactions.length - 1; i > this.mostRecentTransaction; i--) {\n                    this.transactions.splice(i, 1);\n                }\n                this.numTransactions = this.mostRecentTransaction + 2;\n        }\n        else {\n            this.numTransactions++;\n        }\n\n        // ADD THE TRANSACTION\n        this.transactions[this.mostRecentTransaction+1] = transaction;\n\n        // AND EXECUTE IT\n        this.doTransaction();\n    }\n\n    /**\n     * doTransaction\n     * \n     * Does the current transaction on the stack and advances the transaction\n     * counter. Note this function may be invoked as a result of either adding\n     * a transaction (which also does it), or redoing a transaction.\n     */\n    doTransaction() {\n        if (this.hasTransactionToRedo()) {\n            this.performingDo = true;\n            let transaction = this.transactions[this.mostRecentTransaction+1];\n            transaction.doTransaction();\n            this.mostRecentTransaction++;\n            this.performingDo = false;\n        }\n    }\n\n    /**\n     * This function gets the most recently executed transaction on the \n     * TPS stack and undoes it, moving the TPS counter accordingly.\n     */\n    undoTransaction() {\n        if (this.hasTransactionToUndo()) {\n            this.performingUndo = true;\n            let transaction = this.transactions[this.mostRecentTransaction];\n            transaction.undoTransaction();\n            this.mostRecentTransaction--;\n            this.performingUndo = false;\n        }\n    }\n\n    /**\n     * clearAllTransactions\n     * \n     * Removes all the transactions from the TPS, leaving it with none.\n     */\n    clearAllTransactions() {\n        // REMOVE ALL THE TRANSACTIONS\n        this.transactions = new Array();\n        \n        // MAKE SURE TO RESET THE LOCATION OF THE\n        // TOP OF THE TPS STACK TOO\n        this.mostRecentTransaction = -1;      \n        this.numTransactions = 0; \n    }\n\n    /**\n     * toString\n     * \n     * Builds and returns a textual represention of the full TPS and its stack.\n     */\n    toString() {        \n        let text = \"--Number of Transactions: \" + this.numTransactions + \"\\n\";\n        text += \"--Current Index on Stack: \" + this.mostRecentTransaction + \"\\n\";\n        text += \"--Current Transaction Stack:\\n\";\n        for (let i = 0; i <= this.mostRecentTransaction; i++) {\n            let jT = this.transactions[i];\n            text += \"----\" + jT.toString() + \"\\n\";\n        }\n        return text;        \n    }\n}","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\Workspace.js",["53","54"],"C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\ListLink.js",[],"C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\ToDoItem.js",["55"],"C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\Modal.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":11,"column":1,"nodeType":"62","messageId":"63","endLine":14,"endColumn":4},{"ruleId":"64","severity":1,"message":"65","line":7,"column":5,"nodeType":"66","messageId":"67","endLine":9,"endColumn":6},{"ruleId":"64","severity":1,"message":"65","line":5,"column":5,"nodeType":"66","messageId":"67","endLine":7,"endColumn":6},{"ruleId":"68","severity":1,"message":"69","line":1,"column":1,"nodeType":"70","messageId":"71","endLine":1,"endColumn":13,"fix":"72"},{"ruleId":"73","severity":1,"message":"74","line":194,"column":29,"nodeType":"75","messageId":"76","endLine":194,"endColumn":40},{"ruleId":"77","severity":1,"message":"78","line":9,"column":10,"nodeType":"79","messageId":"80","endLine":9,"endColumn":15},{"ruleId":"81","severity":1,"message":"82","line":37,"column":21,"nodeType":"79","messageId":"83","endLine":37,"endColumn":27},{"ruleId":"77","severity":1,"message":"84","line":188,"column":13,"nodeType":"79","messageId":"80","endLine":188,"endColumn":23},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"87","text":"88"},"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","no-redeclare","'nextId' is already defined.","redeclared","'statusType' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[0,12],""]