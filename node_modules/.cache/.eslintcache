[{"C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\index.js":"1","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\App.js":"2","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\reportWebVitals.js":"3","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\LeftSidebar.js":"4","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\Navbar.js":"5","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\common\\jsTPS.js":"6","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\Workspace.js":"7","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\ListLink.js":"8","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\ToDoItem.js":"9","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\Modal.js":"10"},{"size":539,"mtime":1615565841000,"results":"11","hashOfConfig":"12"},{"size":3848,"mtime":1615871855794,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1615565841000,"results":"14","hashOfConfig":"12"},{"size":1488,"mtime":1615565841000,"results":"15","hashOfConfig":"12"},{"size":412,"mtime":1615565841000,"results":"16","hashOfConfig":"12"},{"size":6496,"mtime":1615565841000,"results":"17","hashOfConfig":"12"},{"size":2098,"mtime":1615886238604,"results":"18","hashOfConfig":"12"},{"size":917,"mtime":1615565841000,"results":"19","hashOfConfig":"12"},{"size":4442,"mtime":1615946453541,"results":"20","hashOfConfig":"12"},{"size":709,"mtime":1615872352413,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"2ztbxs",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"24"},"C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\index.js",[],["49","50"],"C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\App.js",["51"],"// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\nimport React, { Component } from 'react';\nimport testData from './test/testData.json'\nimport jsTPS from './common/jsTPS' // WE NEED THIS TOO\n\n// THESE ARE OUR REACT COMPONENTS\nimport Navbar from './components/Navbar'\nimport LeftSidebar from './components/LeftSidebar'\nimport Workspace from './components/Workspace'\nimport Modal from './components/Modal'\n{/*import ItemsListHeaderComponent from './components/ItemsListHeaderComponent'\nimport ItemsListComponent from './components/ItemsListComponent'\nimport ListsComponent from './components/ListsComponent'\n*/}\nclass App extends Component {\n  constructor(props) {\n    // ALWAYS DO THIS FIRST\n    super(props);\n\n    // DISPLAY WHERE WE ARE\n    console.log(\"App constructor\");\n\n    // MAKE OUR TRANSACTION PROCESSING SYSTEM\n    this.tps = new jsTPS();\n\n    // CHECK TO SEE IF THERE IS DATA IN LOCAL STORAGE FOR THIS APP\n    let recentLists = localStorage.getItem(\"recentLists\");\n    console.log(\"recentLists: \" + recentLists);\n    if (!recentLists) {\n      recentLists = JSON.stringify(testData.toDoLists);\n      localStorage.setItem(\"toDoLists\", recentLists);\n    }\n    recentLists = JSON.parse(recentLists);\n\n    // FIND OUT WHAT THE HIGHEST ID NUMBERS ARE FOR LISTS\n    let highListId = -1;\n    let highListItemId = -1;\n    for (let i = 0; i < recentLists.length; i++) {\n      let toDoList = recentLists[i];\n      if (toDoList.id > highListId) {\n        highListId = toDoList.id;\n      }\n      for (let j = 0; j < toDoList.items.length; j++) {\n        let toDoListItem = toDoList.items[j];\n        if (toDoListItem.id > highListItemId)\n        highListItemId = toDoListItem.id;\n      }\n    };\n\n    // SETUP OUR APP STATE\n    this.state = {\n      toDoLists: recentLists,\n      currentList: {items: []},\n      nextListId: highListId+1,\n      nextListItemId: highListItemId+1,\n      useVerboseFeedback: true\n    }\n  }\n\n  // WILL LOAD THE SELECTED LIST\n  loadToDoList = (toDoList) => {\n    console.log(\"loading \" + toDoList);\n\n    // MAKE SURE toDoList IS AT THE TOP OF THE STACK BY REMOVING THEN PREPENDING\n    const nextLists = this.state.toDoLists.filter(testList =>\n      testList.id !== toDoList.id\n    );\n    nextLists.unshift(toDoList);\n\n    this.setState({\n      toDoLists: nextLists,\n      currentList: toDoList\n    });\n  }\n\n  addNewList = () => {\n    let newToDoListInList = [this.makeNewToDoList()];\n    let newToDoListsList = [...newToDoListInList, ...this.state.toDoLists];\n    let newToDoList = newToDoListInList[0];\n\n    // AND SET THE STATE, WHICH SHOULD FORCE A render\n    this.setState({\n      toDoLists: newToDoListsList,\n      currentList: newToDoList,\n      nextListId: this.state.nextListId+1\n    }, this.afterToDoListsChangeComplete);\n  }\n\n  makeNewToDoList = () => {\n    let newToDoList = {\n      id: this.highListId,\n      name: 'Untitled',\n      items: []\n    };\n    return newToDoList;\n  }\n\n  makeNewToDoListItem = () =>  {\n    let newToDoListItem = {\n      description: \"No Description\",\n      dueDate: \"none\",\n      status: \"incomplete\"\n    };\n    return newToDoListItem;\n  }\n\n  // THIS IS A CALLBACK FUNCTION FOR AFTER AN EDIT TO A LIST\n  afterToDoListsChangeComplete = () => {\n    console.log(\"App updated currentToDoList: \" + this.state.currentList);\n\n    // WILL THIS WORK? @todo\n    let toDoListsString = JSON.stringify(this.state.toDoLists);\n    localStorage.setItem(\"recent_work\", toDoListsString);\n  }\n\n  render() {\n    let items = this.state.currentList.items;\n    return (\n      <div id=\"root\">\n        <Modal />\n        <Navbar />\n        <LeftSidebar \n          toDoLists={this.state.toDoLists}\n          loadToDoListCallback={this.loadToDoList}\n          addNewListCallback={this.addNewList}\n        />\n        <Workspace toDoListItems={items} />\n      </div>\n    );\n  }\n}\n\nexport default App;","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\reportWebVitals.js",[],"C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\LeftSidebar.js",["52"],"// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\nimport React, { Component } from 'react';\nimport ListLink from './ListLink'\nimport AddBox from '@material-ui/icons/AddBox';\n\nclass LeftSidebar extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleAddNewList = () => {\n        this.props.addNewListCallback();\n    }\n\n    render() {\n        return (\n            <div id=\"left-sidebar\">\n                <div id=\"left-sidebar-header\" class=\"section-header\">\n                    <span class=\"left-sidebar-header-text\">Todolists</span>\n                    <span class=\"left-sidebar-controls\" id=\"add-undo-redo-box\">\n                        <AddBox \n                            id=\"add-list-button\"\n                            className=\"material-icons todo_button\"\n                            onClick={this.handleAddNewList} />\n                    </span>\n                </div>\n                <div id=\"todo-lists-list\">\n                {\n                    this.props.toDoLists.map((toDoList) => (\n                        <ListLink\n                            key={toDoList.id}\n                            toDoList={toDoList}                                // PASS THE LIST TO THE CHILDREN\n                            loadToDoListCallback={this.props.loadToDoListCallback} />  // PASS THE CALLBACK TO THE CHILDREN\n                    ))\n                }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LeftSidebar;","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\Navbar.js",["53"],"// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\nimport React, { Component } from 'react'\n\nclass Navbar extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div id=\"navbar\">\n                <div id=\"title-div\">\n                    Todo Tracker\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Navbar;","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\common\\jsTPS.js",["54","55"],"'use strict'\n\n/**\n * jsTPS_Transaction\n * \n * This provides the basic structure for a transaction class. Note to use\n * jsTPS one should create objects that define these two methods, doTransaction\n * and undoTransaction, which will update the application state accordingly.\n * \n * @author THE McKilla Gorilla (accept no imposters)\n * @version 1.0\n */\nexport class jsTPS_Transaction {\n    /**\n     * This method is called by jTPS when a transaction is executed.\n     */\n    doTransaction() {\n        console.log(\"doTransaction - MISSING IMPLEMENTATION\");\n    }\n    \n    /**\n     * This method is called by jTPS when a transaction is undone.\n     */\n    undoTransaction() {\n        console.log(\"undoTransaction - MISSING IMPLEMENTATION\");\n    }\n}\n\n/**\n * jsTPS\n * \n * This class serves as the Transaction Processing System. Note that it manages\n * a stack of jsTPS_Transaction objects, each of which know how to do or undo\n * state changes for the given application. Note that this TPS is not platform\n * specific as it is programmed in raw JavaScript.\n */\nexport default class jsTPS {\n    constructor() {\n        // THE TRANSACTION STACK\n        this.transactions = [];\n\n        // THE TOTAL NUMBER OF TRANSACTIONS ON THE STACK,\n        // INCLUDING THOSE THAT MAY HAVE ALREADY BEEN UNDONE\n        this.numTransactions = 0;\n\n        // THE INDEX OF THE MOST RECENT TRANSACTION, NOTE THAT\n        // THIS MAY BE IN THE MIDDLE OF THE TRANSACTION STACK\n        // IF SOME TRANSACTIONS ON THE STACK HAVE BEEN UNDONE\n        // AND STILL COULD BE REDONE.\n        this.mostRecentTransaction = -1;\n\n        // THESE STATE VARIABLES ARE TURNED ON AND OFF WHILE\n        // TRANSACTIONS ARE DOING THEIR WORK SO AS TO HELP\n        // MANAGE CONCURRENT UPDATES\n        this.performingDo = false;\n        this.performingUndo = false;\n    }\n\n    /**\n     * isPerformingDo\n     * \n     * Accessor method for getting a boolean representing whether or not\n     * a transaction is currently in the midst of a do/redo operation.\n     */\n    isPerformingDo() {\n        return this.performingDo;\n    }\n\n    /**\n     * isPerformingUndo\n     * \n     * Accessor method for getting a boolean representing whether or not\n     * a transaction is currently in the midst of an undo operation.\n     */\n    isPerformingUndo() {\n        return this.performingUndo;\n    }\n\n    /**\n     * getSize\n     * \n     * Accessor method for getting the number of transactions on the stack.\n     */\n    getSize() {\n        return this.transactions.length;\n    }\n\n    /**\n     * getRedoSize\n     * \n     * Method for getting the total number of transactions on the stack\n     * that can possibly be redone.\n     */\n    getRedoSize() {\n        return this.getSize() - this.mostRecentTransaction - 1;\n    }\n\n    /**\n     * getUndoSize\n     * \n     * Method for getting the total number of transactions on the stack\n     * that can possible be undone.\n     */\n    getUndoSize() {\n        return this.mostRecentTransaction + 1;\n    }\n\n    /**\n     * hasTransactionToRedo\n     * \n     * Method for getting a boolean representing whether or not\n     * there are transactions on the stack that can be redone.\n     */\n    hasTransactionToRedo() {\n        return (this.mostRecentTransaction+1) < this.numTransactions;\n    }\n\n    /**\n     * hasTransactionToUndo\n     * \n     * Method for getting a boolean representing whehter or not\n     * there are transactions on the stack that can be undone.\n     */\n    hasTransactionToUndo() {\n        return this.mostRecentTransaction >= 0;\n    }\n\n    /**\n     * addTransaction\n     * \n     * Method for adding a transaction to the TPS stack, note it\n     * also then does the transaction.\n     * \n     * @param {jsTPS_Transaction} transaction Transaction to add to the stack and do.\n     */\n    addTransaction(transaction) {\n        // ARE WE BRANCHING?\n        if ((this.mostRecentTransaction < 0) \n            || (this.mostRecentTransaction < (this.transactions.length - 1))) {\n                for (let i = this.transactions.length - 1; i > this.mostRecentTransaction; i--) {\n                    this.transactions.splice(i, 1);\n                }\n                this.numTransactions = this.mostRecentTransaction + 2;\n        }\n        else {\n            this.numTransactions++;\n        }\n\n        // ADD THE TRANSACTION\n        this.transactions[this.mostRecentTransaction+1] = transaction;\n\n        // AND EXECUTE IT\n        this.doTransaction();\n    }\n\n    /**\n     * doTransaction\n     * \n     * Does the current transaction on the stack and advances the transaction\n     * counter. Note this function may be invoked as a result of either adding\n     * a transaction (which also does it), or redoing a transaction.\n     */\n    doTransaction() {\n        if (this.hasTransactionToRedo()) {\n            this.performingDo = true;\n            let transaction = this.transactions[this.mostRecentTransaction+1];\n            transaction.doTransaction();\n            this.mostRecentTransaction++;\n            this.performingDo = false;\n        }\n    }\n\n    /**\n     * This function gets the most recently executed transaction on the \n     * TPS stack and undoes it, moving the TPS counter accordingly.\n     */\n    undoTransaction() {\n        if (this.hasTransactionToUndo()) {\n            this.performingUndo = true;\n            let transaction = this.transactions[this.mostRecentTransaction];\n            transaction.undoTransaction();\n            this.mostRecentTransaction--;\n            this.performingUndo = false;\n        }\n    }\n\n    /**\n     * clearAllTransactions\n     * \n     * Removes all the transactions from the TPS, leaving it with none.\n     */\n    clearAllTransactions() {\n        // REMOVE ALL THE TRANSACTIONS\n        this.transactions = new Array();\n        \n        // MAKE SURE TO RESET THE LOCATION OF THE\n        // TOP OF THE TPS STACK TOO\n        this.mostRecentTransaction = -1;      \n        this.numTransactions = 0; \n    }\n\n    /**\n     * toString\n     * \n     * Builds and returns a textual represention of the full TPS and its stack.\n     */\n    toString() {        \n        let text = \"--Number of Transactions: \" + this.numTransactions + \"\\n\";\n        text += \"--Current Index on Stack: \" + this.mostRecentTransaction + \"\\n\";\n        text += \"--Current Transaction Stack:\\n\";\n        for (let i = 0; i <= this.mostRecentTransaction; i++) {\n            let jT = this.transactions[i];\n            text += \"----\" + jT.toString() + \"\\n\";\n        }\n        return text;        \n    }\n}","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\Workspace.js",["56"],"// IMPORT ALL THE THINGS NEEDED FROM OTHER JAVASCRIPT SOURCE FILES\nimport React, { Component } from 'react'\nimport ToDoItem from './ToDoItem'\nimport Undo from '@material-ui/icons/Undo';\nimport Redo from '@material-ui/icons/Redo';\nimport AddBox from '@material-ui/icons/AddBox';\nimport Delete from '@material-ui/icons/Delete';\nimport Close from '@material-ui/icons/Close';\n\nclass Workspace extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div id=\"workspace\">\n                <div id=\"todo-list-header-card\" className=\"list-item-card\">\n                    <div id=\"task-col-header\" className=\"item-col todo-button\" onClick={console.log(\"ASD\")}>Task</div>\n                    <div id=\"date-col-header\" className=\"item-col todo-button\">Due Date</div>\n                    <div id=\"status-col-header\" className=\"item-col todo-button\">Status</div>\n                    <div className=\"item-col\" display=\"flex\" flexDirection=\"row\" flexWrap=\"nowrap\">\n                        <Undo id=\"undo-button\" className=\"list-item-control material-icons todo-button\" />\n                        <Redo id=\"redo-button\" className=\"list-item-control material-icons todo-button\" />\n                        <AddBox id=\"add-item-button\" className=\"list-item-control material-icons todo-button\" />\n                        <Delete id=\"delete-list-button\" className=\"list-item-control material-icons todo-button\" />\n                        <Close id=\"close-list-button\" className=\"list-item-control material-icons todo-button\" />\n                    </div>\n                </div>\n                <div id=\"todo-list-items-div\">\n                    {\n                        this.props.toDoListItems.map((toDoListItem) => (\n                        <ToDoItem\n                            key={toDoListItem.id}\n                            toDoListItem={toDoListItem}     // PASS THE ITEM TO THE CHILDREN\n                        />))\n                    }\n                </div>\n                <br />\n            </div>\n        );\n    }\n}\n\nexport default Workspace;","C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\ListLink.js",[],"C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\ToDoItem.js",["57"],"C:\\Users\\sway\\Desktop\\hw2\\todo_tracker_hw2\\src\\components\\Modal.js",["58"],"import React, { Component } from 'react';\r\n\r\nclass Modal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className = \"modal\">\r\n            <div className = \"modal-content\">\r\n                <div className = \"modal-header\">\r\n                    <h4 className = \"modal-title\">Modal Title</h4>\r\n                </div>\r\n                <div className = \"modal_body\">This is Modal Content\r\n                </div>\r\n                <div className = \"modal-footer\">\r\n                    <button className =\"button\">Close</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Modal",{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":11,"column":1,"nodeType":"65","messageId":"66","endLine":14,"endColumn":4},{"ruleId":"67","severity":1,"message":"68","line":7,"column":5,"nodeType":"69","messageId":"70","endLine":9,"endColumn":6},{"ruleId":"67","severity":1,"message":"68","line":5,"column":5,"nodeType":"69","messageId":"70","endLine":7,"endColumn":6},{"ruleId":"71","severity":1,"message":"72","line":1,"column":1,"nodeType":"73","messageId":"74","endLine":1,"endColumn":13,"fix":"75"},{"ruleId":"76","severity":1,"message":"77","line":194,"column":29,"nodeType":"78","messageId":"79","endLine":194,"endColumn":40},{"ruleId":"67","severity":1,"message":"68","line":11,"column":5,"nodeType":"69","messageId":"70","endLine":13,"endColumn":6},{"ruleId":"80","severity":1,"message":"81","line":120,"column":13,"nodeType":"82","messageId":"83","endLine":120,"endColumn":23},{"ruleId":"67","severity":1,"message":"68","line":4,"column":5,"nodeType":"69","messageId":"70","endLine":6,"endColumn":6},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"86","text":"87"},"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","no-unused-vars","'statusType' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",[0,12],""]